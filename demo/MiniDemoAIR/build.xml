<?xml version="1.0"?>
<project name="MiniDemoAIR" default="build" basedir=".">

  <property file="build.properties" />
  <property environment="env"/>
  <property name="AIR_HOME" location="${env.AIR_HOME}"/>
  <property name="FLEX_HOME" location="${env.FLEX_HOME}"/>

  <fail>
    <condition>
      <not>
        <isset property="env.AIR_HOME" />
      </not>
    </condition>
    Error!
    You need to set AIR_HOME environment variable (path to AIR SDK)
    Example:
    export AIR_HOME=$${HOME}/air_sdk
  </fail>

  <fail>
    <condition>
      <not>
        <isset property="env.FLEX_HOME" />
      </not>
    </condition>
    Error!
    You need to set FLEX_HOME environment variable (path to FLEX SDK)
    Example:
    export FLEX_HOME=$${HOME}/flex_sdk
  </fail>

  <taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar" />

  <!-- dirs -->

  <property name="build.dir" location="build/"/>
  <property name="release.build.dir" location="${build.dir}/release/"/>
  <property name="debug.build.dir" location="${build.dir}/debug/"/>
  <property name="src.dir" location="src/"/>
  <property name="lib.dir" location="libs/"/>
  <property name="alchemy.wrapper.release.dir" location="../../alchemy/wrapper"/>
  <property name="alchemy.wrapper.debug.dir" location="../../alchemy/wrapper"/>

  <property name="adt.config.xml" location="${FLEX_HOME}/frameworks/air-config.xml"/>

  <!-- files -->
  <property name="main.application" location="${src.dir}/MiniDemoAIR.mxml"/>
  <property name="output.swf.name" value="MiniDemoAIR"/>
  <property name="main.application.release.out" location="${release.build.dir}/${output.swf.name}.swf"/>
  <property name="main.application.debug.out" location="${debug.build.dir}/${output.swf.name}.swf"/>

  <property name="swf.width" value="100%"/>
  <property name="swf.height" value="100%"/>
  <property name="swf.debug.title" value="MiniDemoAIR App"/>
  <property name="swf.release.title" value="MiniDemoAIR App"/>
  <property name="swf.version.major" value="10"/>
  <property name="swf.version.minor" value="0"/>
  <property name="swf.version.revision" value="0"/>
  <property name="swf.application" value="${output.swf.name}"/>
  <property name="swf.swf" value="${output.swf.name}"/>
  <property name="swf.bgcolor" value="#FFFFFF"/>

  <!-- To be set in build.properties file
  <property name="adt.store.type" value="pkcs12"/>
  <property name="adt.store.path" value="mycert.p12"/>
  <property name="adt.store.pass" value="12345"/>
  <property
    name="adt.iphone.store.path"
    value="MyiPhoneDevelperCertificate.p12"
    />
  <property name="adt.iphone.store.pass" value="12345"/>
  -->

  <property name="adt.jar" value="${AIR_HOME}/lib/adt.jar"/>
  <property name="adt.out.file.name" value="MiniDemoAIR"/>
  <property name="adt.out.file.ext" value=".air"/>
  <property name="adt.app.descriptor" value="application.xml"/>

  <property name="adt.target.release" value="air"/>
  <property name="adt.target.debug" value="air"/>

  <property name="adt.out.release" location="${release.build.dir}/${adt.out.file.name}${adt.out.file.ext}"/>
  <property name="adt.out.debug" location="${debug.build.dir}/${adt.out.file.name}${adt.out.file.ext}"/>

  <description>
    Minimal Demo Program for lua-alchemy, using AIR
  </description>

  <!-- =================================
        target: build
       ================================= -->
  <target name="build"
    depends="clear, init, compile.release, compile.debug, package.release, package.debug"
    description="MiniDemoAIR application">
  </target>

  <!-- - - - - - - - - - - - - - - - - -
        target: compile.release
       - - - - - - - - - - - - - - - - - -->
  <target name="compile.release">
    <mxmlc file="${main.application}" output="${main.application.release.out}"
      >
      <load-config filename="${adt.config.xml}" />
      <compiler.include-libraries dir="${alchemy.wrapper.release.dir}" append="true">
        <!-- NOTE: this demo intentionally uses wrapper only -->
        <include name="lua-alchemy-wrapper.swc" />
      </compiler.include-libraries>
    </mxmlc>
  </target>

  <!-- - - - - - - - - - - - - - - - - -
        target: compile.debug
       - - - - - - - - - - - - - - - - - -->
  <target name="compile.debug">
    <mxmlc debug="true" file="${main.application}" output="${main.application.debug.out}"
      >
      <load-config filename="${adt.config.xml}" />
      <compiler.include-libraries dir="${alchemy.wrapper.debug.dir}" append="true">
        <!-- NOTE: this demo intentionally uses wrapper only -->
        <include name="lua-alchemy-wrapper.swc" />
      </compiler.include-libraries>
    </mxmlc>
  </target>

  <!-- - - - - - - - - - - - - - - - - -
        target: package.debug
       - - - - - - - - - - - - - - - - - -->
  <target name="package.debug">
    <java jar="${adt.jar}" fork="true" failonerror="true">
      <arg value="-package"/>
      <arg value="-storetype"/>
      <arg value="${adt.store.type}"/>
      <arg value="-keystore"/>
      <arg value="${adt.store.path}"/>
      <arg value="-storepass"/>
      <arg value="${adt.store.pass}"/>
      <arg value="-target"/>
      <arg value="${adt.target.debug}"/>
      <arg value="${adt.out.debug}"/>
      <arg value="${adt.app.descriptor}"/>
      <arg value="-C"/>
      <arg value="${debug.build.dir}"/>
      <arg value="${main.application.debug.out}"/>
    </java>
  </target>

  <!-- - - - - - - - - - - - - - - - - -
        target: package.release
       - - - - - - - - - - - - - - - - - -->
  <target name="package.release">
    <java jar="${adt.jar}" fork="true" failonerror="true">
      <arg value="-package"/>
      <arg value="-storetype"/>
      <arg value="${adt.store.type}"/>
      <arg value="-keystore"/>
      <arg value="${adt.store.path}"/>
      <arg value="-storepass"/>
      <arg value="${adt.store.pass}"/>
      <arg value="-target"/>
      <arg value="${adt.target.release}"/>
      <arg value="${adt.out.release}"/>
      <arg value="${adt.app.descriptor}"/>
      <arg value="-C"/>
      <arg value="${release.build.dir}"/>
      <arg value="${main.application.release.out}"/>
    </java>
  </target>

  <!-- - - - - - - - - - - - - - - - - -
        target: package.iphone
       - - - - - - - - - - - - - - - - - -->
  <target name="package.iphone">
    <java jar="${adt.jar}" fork="true" failonerror="true">
      <arg value="-package"/>
      <arg value="-target"/>
      <arg value="${adt.iphone.target}"/>
      <arg value="-provisioning-profile"/>
      <arg value="${adt.iphone.provisioning-profile}"/>
      <arg value="-storetype"/>
      <arg value="${adt.store.type}"/>
      <arg value="-keystore"/>
      <arg value="${adt.iphone.store.path}"/>
      <arg value="-storepass"/>
      <arg value="${adt.iphone.store.pass}"/>
      <arg value="${adt.out.release}"/>
      <arg value="${adt.app.descriptor}"/>
      <arg value="-C"/>
      <arg value="${release.build.dir}"/>
      <arg value="${main.application.release.out}"/>
    </java>
  </target>

  <!-- - - - - - - - - - - - - - - - - -
          target: clear
         - - - - - - - - - - - - - - - - - -->
  <target name="clear">
    <delete failonerror="false">
      <fileset dir="${build.dir}" includes="**/*.*" />
    </delete>
  </target>

  <!-- - - - - - - - - - - - - - - - - -
          target: init
         - - - - - - - - - - - - - - - - - -->
  <target name="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${release.build.dir}"/>
    <mkdir dir="${debug.build.dir}"/>
  </target>
</project>
